/* The following code was generated by JFlex 1.6.1 */

package se.lth.cs.nlp.mentions;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/csz-mkg/NLP/Repositories/BioNLP/marcus/dictionarytagger/mention-index-py4j/src/main/jflex/tokenizer.flex</tt>
 */
class Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\32\2\3\1\2\1\32\1\32\1\1\22\32\1\7\1\57\1\74"+
    "\1\22\1\102\1\101\1\21\1\61\1\103\1\104\1\0\1\5\1\6"+
    "\1\20\1\14\1\46\1\62\1\63\1\64\1\65\2\66\1\67\3\23"+
    "\1\45\1\31\3\0\1\111\1\47\1\26\1\115\1\113\1\120\1\12"+
    "\1\43\1\26\1\33\1\114\3\26\1\117\1\116\1\26\1\37\1\26"+
    "\1\112\1\42\1\35\2\26\1\53\1\24\1\26\1\70\1\107\1\100"+
    "\1\110\1\0\1\50\1\0\4\27\1\10\1\44\1\16\1\34\7\30"+
    "\1\40\2\30\1\41\1\36\2\30\1\54\1\25\2\30\1\105\1\52"+
    "\1\106\1\0\6\32\1\32\32\32\1\51\1\0\4\102\4\0\1\15"+
    "\1\74\6\0\2\4\1\60\1\13\3\0\1\4\1\15\1\74\3\4"+
    "\1\0\27\11\1\0\7\11\30\13\1\0\10\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\2\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\2\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\2\11\1\13\1\11\1\13\1\11"+
    "\3\13\2\11\1\13\1\11\1\13\2\11\1\13\3\11\2\13\4\11"+
    "\1\13\2\11\1\13\3\11\3\13\2\11\1\13\2\11\1\13\1\11"+
    "\1\13\1\11\1\13\2\11\1\13\1\11\2\13\1\11\1\13\2\11"+
    "\1\13\3\11\1\13\1\11\1\13\2\11\2\13\1\15\1\11\3\13"+
    "\4\15\1\11\1\15\1\13\1\11\1\15\1\13\1\11\1\15\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\2\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\2\13\1\11\1\15\1\13\1\11\1\13\3\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\7\13\2\11"+
    "\1\13\2\11\2\13\1\11\1\13\4\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\105\13\1\15\33\13\13\15\1\72\6\15"+
    "\4\0\14\15\16\0\5\15\7\0\1\15\1\0\1\15\201\0\1\11"+
    "\1\13\1\11\1\13\1\15\1\0\1\11\1\13\2\0\1\15\3\13"+
    "\1\0\1\11\6\0\1\11\1\0\3\11\1\0\1\11\1\0\2\11"+
    "\1\13\21\11\1\0\11\11\43\13\1\11\2\13\3\11\3\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\5\13\1\11\1\13\1\0\1\11\1\13\2\11\2\13"+
    "\63\11\60\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\10\0\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\2\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\2\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\0\46\11\2\0\1\15\7\0\47\13\2\0\1\55\4\0"+
    "\1\102\100\0\33\15\5\0\3\15\30\0\1\102\1\71\23\0\53\15"+
    "\25\0\12\4\4\0\2\15\1\0\143\15\1\0\1\15\17\0\2\15"+
    "\7\0\2\15\12\4\3\15\2\0\1\15\20\0\1\15\1\0\36\15"+
    "\35\0\131\15\13\0\1\15\16\0\12\4\41\15\11\0\2\15\4\0"+
    "\1\15\5\0\26\15\4\0\1\15\11\0\1\15\3\0\1\15\27\0"+
    "\31\15\107\0\23\15\121\0\66\15\3\0\1\15\22\0\1\15\7\0"+
    "\12\15\4\0\12\4\1\0\20\15\4\0\10\15\2\0\2\15\2\0"+
    "\26\15\1\0\7\15\1\0\1\15\3\0\4\15\3\0\1\15\20\0"+
    "\1\15\15\0\2\15\1\0\3\15\4\0\12\4\2\15\2\102\6\4"+
    "\1\0\1\102\11\0\6\15\4\0\2\15\2\0\26\15\1\0\7\15"+
    "\1\0\2\15\1\0\2\15\1\0\2\15\37\0\4\15\1\0\1\15"+
    "\7\0\12\4\2\0\3\15\20\0\11\15\1\0\3\15\1\0\26\15"+
    "\1\0\7\15\1\0\2\15\1\0\5\15\3\0\1\15\22\0\1\15"+
    "\17\0\2\15\4\0\12\4\1\0\1\102\23\0\10\15\2\0\2\15"+
    "\2\0\26\15\1\0\7\15\1\0\2\15\1\0\5\15\3\0\1\15"+
    "\36\0\2\15\1\0\3\15\4\0\12\4\1\0\1\15\6\4\13\0"+
    "\1\15\1\0\6\15\3\0\3\15\1\0\4\15\3\0\2\15\1\0"+
    "\1\15\1\0\2\15\3\0\2\15\3\0\3\15\3\0\14\15\26\0"+
    "\1\15\25\0\15\4\6\0\1\102\13\0\10\15\1\0\3\15\1\0"+
    "\27\15\1\0\20\15\3\0\1\15\32\0\2\15\6\0\2\15\4\0"+
    "\12\4\10\0\7\4\6\0\10\15\1\0\3\15\1\0\27\15\1\0"+
    "\12\15\1\0\5\15\3\0\1\15\40\0\1\15\1\0\2\15\4\0"+
    "\12\4\1\0\2\15\22\0\10\15\1\0\3\15\1\0\51\15\2\0"+
    "\1\15\20\0\1\15\21\0\2\15\4\0\20\4\4\0\6\15\5\0"+
    "\22\15\3\0\30\15\1\0\11\15\1\0\1\15\2\0\7\15\37\0"+
    "\12\4\21\0\60\15\1\0\2\15\13\0\1\102\7\15\11\0\12\4"+
    "\47\0\2\15\1\0\1\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\6\0\4\15\1\0\7\15\1\0\3\15\1\0\1\15\1\0\1\15"+
    "\2\0\2\15\1\0\4\15\1\0\2\15\11\0\1\15\2\0\5\15"+
    "\1\0\1\15\11\0\12\4\2\0\4\15\40\0\1\15\37\0\24\4"+
    "\14\0\10\15\1\0\44\15\33\0\5\15\163\0\53\15\24\0\1\15"+
    "\12\4\6\0\6\15\4\0\4\15\3\0\1\15\3\0\2\15\7\0"+
    "\3\15\4\0\15\15\14\0\1\15\1\0\12\4\6\0\46\11\1\0"+
    "\1\11\5\0\1\11\2\0\53\15\1\0\u014d\15\1\0\4\15\2\0"+
    "\7\15\1\0\1\15\1\0\4\15\2\0\51\15\1\0\4\15\2\0"+
    "\41\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0"+
    "\17\15\1\0\71\15\1\0\4\15\2\0\103\15\16\0\24\4\3\0"+
    "\20\15\20\0\125\15\14\0\u026c\15\2\0\21\15\1\0\32\15\5\0"+
    "\113\15\3\0\3\4\10\15\7\0\15\15\1\0\4\15\16\0\22\15"+
    "\16\0\22\15\16\0\15\15\1\0\3\15\17\0\64\15\43\0\1\15"+
    "\3\0\1\102\1\15\3\0\12\4\6\0\12\4\26\0\12\4\6\0"+
    "\130\15\10\0\51\15\1\0\1\15\5\0\106\15\12\0\37\15\47\0"+
    "\12\4\36\15\2\0\5\15\13\0\54\15\25\0\7\15\10\0\13\4"+
    "\45\0\27\15\11\0\65\15\53\0\12\4\6\0\12\4\15\0\1\15"+
    "\135\0\57\15\21\0\7\15\4\0\12\4\51\0\36\15\15\0\2\15"+
    "\12\4\54\15\32\0\44\15\34\0\12\4\3\0\3\15\12\4\44\15"+
    "\153\0\4\15\1\0\4\15\3\0\2\15\11\0\54\13\77\15\15\13"+
    "\1\15\42\13\45\15\100\0\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\11\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\11\13\10\11\6\13\2\0\6\11\2\0\10\13\10\11\10\13"+
    "\10\11\6\13\2\0\6\11\2\0\10\13\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\10\13\10\11\16\13\2\0\10\13\10\15"+
    "\10\13\10\15\10\13\10\15\5\13\1\0\2\13\4\11\1\15\1\0"+
    "\1\13\3\0\3\13\1\0\2\13\4\11\1\15\3\0\4\13\2\0"+
    "\2\13\4\11\4\0\10\13\5\11\5\0\3\13\1\0\2\13\4\11"+
    "\1\15\26\0\1\17\4\0\1\75\1\76\1\73\1\0\1\73\1\74"+
    "\1\73\11\0\1\122\1\122\6\0\1\101\77\0\1\4\1\15\2\0"+
    "\6\4\5\0\1\15\12\4\6\0\15\15\3\0\36\102\104\0\1\11"+
    "\4\0\1\11\2\0\1\13\3\11\2\13\3\11\1\13\1\0\1\11"+
    "\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11"+
    "\1\0\1\13\4\11\1\13\4\15\1\13\2\0\2\13\2\11\5\0"+
    "\1\11\4\13\4\0\1\13\1\0\63\4\1\11\1\13\5\4\u02d6\0"+
    "\74\4\116\0\26\4\u0276\0\36\4\u046c\0\57\11\1\0\57\13\1\0"+
    "\1\11\1\13\3\11\2\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\4\11\1\13\1\11\2\13\1\11\6\13\2\15\3\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\2\13\6\0\1\11\1\13"+
    "\1\11\1\13\3\0\1\11\1\13\11\0\1\4\2\0\46\13\1\0"+
    "\1\13\5\0\1\13\2\0\70\15\7\0\1\15\20\0\27\15\11\0"+
    "\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0"+
    "\7\15\1\0\7\15\1\0\7\15\120\0\1\15\2\0\1\71\1\0"+
    "\1\71\14\0\1\71\u01bf\0\1\71\1\121\2\0\2\15\1\4\31\0"+
    "\11\4\7\0\5\15\2\0\3\4\2\15\4\0\126\15\6\0\3\15"+
    "\1\0\132\15\1\0\4\15\5\0\51\15\3\0\136\15\3\0\4\4"+
    "\12\0\33\15\65\0\20\15\40\0\12\4\36\0\10\4\1\0\17\4"+
    "\40\0\12\4\47\0\17\4\u0140\0\u19b6\15\112\0\1\56\u51cc\15\63\0"+
    "\u048d\15\103\0\56\15\2\0\u010d\15\3\0\20\15\12\4\2\15\24\0"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\15\20\0\1\15\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\2\15\2\0\106\15"+
    "\12\4\47\0\11\15\2\0\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\3\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13"+
    "\1\15\10\13\1\11\1\13\1\11\1\13\2\11\1\13\1\11\1\13"+
    "\1\11\1\13\1\11\1\13\1\11\1\13\1\15\2\0\1\11\1\13"+
    "\1\11\1\13\1\0\1\11\1\13\1\11\3\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11\1\13\1\11"+
    "\1\13\1\11\1\13\1\11\1\13\1\11\1\13\4\11\2\0\2\11"+
    "\105\0\3\15\1\13\7\15\1\0\3\15\1\0\4\15\1\0\27\15"+
    "\15\0\6\4\2\0\1\102\7\0\64\15\16\0\62\15\34\0\12\4"+
    "\30\0\6\15\3\0\1\15\4\0\12\4\34\15\12\0\27\15\31\0"+
    "\35\15\7\0\57\15\34\0\1\15\12\4\6\0\5\15\1\0\12\15"+
    "\12\4\5\15\1\0\51\15\27\0\3\15\1\0\10\15\4\0\12\4"+
    "\6\0\27\15\3\0\1\15\3\0\62\15\1\0\1\15\3\0\2\15"+
    "\2\0\5\15\2\0\1\15\1\0\1\15\30\0\3\15\2\0\13\15"+
    "\7\0\3\15\14\0\6\15\2\0\6\15\2\0\6\15\11\0\7\15"+
    "\1\0\7\15\1\0\53\13\1\0\4\15\4\0\2\13\132\0\43\15"+
    "\15\0\12\4\6\0\u2ba4\15\14\0\27\15\4\0\61\15\u2104\0\u016e\15"+
    "\2\0\152\15\46\0\7\13\14\0\5\13\5\0\1\15\1\0\12\15"+
    "\1\0\15\15\1\0\5\15\1\0\1\15\1\0\2\15\1\0\2\15"+
    "\1\0\154\15\41\0\u016b\15\22\0\100\15\2\0\66\15\50\0\14\15"+
    "\1\102\23\0\2\71\76\0\2\71\21\0\1\77\5\0\1\102\6\0"+
    "\5\15\1\0\207\15\7\0\1\102\7\0\1\71\1\77\2\0\12\4"+
    "\7\0\32\11\6\0\32\13\11\0\1\71\1\0\131\15\3\0\6\15"+
    "\2\0\6\15\2\0\6\15\2\0\3\15\3\0\2\102\3\0\2\102"+
    "\31\0\14\15\1\0\32\15\1\0\23\15\1\0\2\15\1\0\17\15"+
    "\2\0\16\15\42\0\173\15\14\0\55\4\14\0\71\4\21\0\2\4"+
    "\364\0\35\15\3\0\61\15\20\0\33\4\4\0\40\15\4\4\14\0"+
    "\21\15\1\4\10\15\1\4\5\0\46\15\12\0\36\15\2\0\44\15"+
    "\4\0\10\15\1\0\5\4\52\0\50\11\50\13\116\15\2\0\12\4"+
    "\126\0\50\15\10\0\64\15\234\0\u0137\15\11\0\26\15\12\0\10\15"+
    "\230\0\6\15\2\0\1\15\1\0\54\15\1\0\2\15\3\0\1\15"+
    "\2\0\27\15\2\0\10\4\27\15\2\0\7\4\37\15\10\0\11\4"+
    "\120\0\26\15\6\4\4\0\32\15\106\0\70\15\6\0\2\15\100\0"+
    "\1\15\17\0\4\15\1\0\3\15\1\0\33\15\14\0\10\4\30\0"+
    "\35\15\2\4\1\0\35\15\3\4\40\0\10\15\1\0\34\15\6\0"+
    "\5\4\20\0\66\15\12\0\26\15\2\0\10\4\23\15\5\0\10\4"+
    "\22\15\27\0\7\4\120\0\111\15\u0217\0\37\4\u0184\0\65\15\32\0"+
    "\36\4\23\0\55\15\40\0\31\15\7\0\12\4\11\0\44\15\17\0"+
    "\12\4\20\0\43\15\3\0\1\15\14\0\60\15\16\0\4\15\13\0"+
    "\12\4\1\15\6\0\24\4\13\0\22\15\1\0\31\15\204\0\57\15"+
    "\21\0\12\4\13\0\10\15\2\0\2\15\2\0\26\15\1\0\7\15"+
    "\1\0\2\15\1\0\5\15\3\0\1\15\37\0\5\15\u011e\0\60\15"+
    "\24\0\2\15\1\0\1\15\10\0\12\4\246\0\57\15\121\0\60\15"+
    "\24\0\1\15\13\0\12\4\46\0\53\15\25\0\12\4\u01d6\0\40\11"+
    "\40\13\23\4\14\0\1\15\u01c0\0\71\15\u0507\0\u0399\15\147\0\157\4"+
    "\u0b91\0\u042f\15\u33d1\0\u0239\15\7\0\37\15\1\0\12\4\146\0\36\15"+
    "\22\0\60\15\20\0\4\15\14\0\12\4\1\0\7\4\1\0\25\15"+
    "\5\0\23\15\u0370\0\105\15\13\0\1\15\102\0\15\15\u4060\0\2\15"+
    "\u0bfe\0\153\15\5\0\15\15\3\0\11\15\7\0\12\15\u16c6\0\22\4"+
    "\216\0\32\11\32\13\32\11\7\13\1\0\22\13\32\11\32\13\1\11"+
    "\1\0\2\11\2\0\1\11\2\0\2\11\2\0\4\11\1\0\10\11"+
    "\4\13\1\0\1\13\1\0\7\13\1\0\13\13\32\11\32\13\2\11"+
    "\1\0\4\11\2\0\10\11\1\0\7\11\1\0\32\13\2\11\1\0"+
    "\4\11\1\0\5\11\1\0\1\11\3\0\7\11\1\0\32\13\32\11"+
    "\32\13\32\11\32\13\32\11\32\13\32\11\32\13\32\11\32\13\32\11"+
    "\34\13\2\0\31\11\1\0\31\13\1\0\6\13\31\11\1\0\31\13"+
    "\1\0\6\13\31\11\1\0\31\13\1\0\6\13\31\11\1\0\31\13"+
    "\1\0\6\13\31\11\1\0\31\13\1\0\6\13\1\11\1\13\2\0"+
    "\62\4\u1000\0\305\15\2\0\11\4\u0530\0\4\15\1\0\33\15\1\0"+
    "\2\15\1\0\1\15\2\0\1\15\1\0\12\15\1\0\4\15\1\0"+
    "\1\15\1\0\1\15\6\0\1\15\4\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\3\15\1\0\2\15\1\0\1\15\2\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\2\15\1\0"+
    "\1\15\2\0\4\15\1\0\7\15\1\0\4\15\1\0\4\15\1\0"+
    "\1\15\1\0\12\15\1\0\21\15\5\0\3\15\1\0\5\15\1\0"+
    "\21\15\u0244\0\15\4\u0ef3\0\ua6d7\15\51\0\u1035\15\13\0\336\15\u3fe2\0"+
    "\u021e\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\6\1\10\1\6\2\11\1\12\1\1\1\4"+
    "\1\13\1\14\1\7\1\6\2\7\1\6\1\15\1\16"+
    "\1\17\1\7\1\6\1\11\1\20\1\21\2\4\2\5"+
    "\2\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\2\7\1\10\10\0\1\34\1\4\2\34"+
    "\4\35\1\34\1\4\1\0\1\4\2\0\1\6\1\36"+
    "\1\0\1\6\1\0\1\37\1\40\1\37\1\41\3\0"+
    "\1\42\1\4\1\37\1\40\1\36\1\6\2\37\1\40"+
    "\1\36\1\6\1\37\1\40\1\36\1\6\1\0\1\4"+
    "\2\37\10\0\1\34\1\4\2\34\1\4\1\0\1\4"+
    "\1\0\1\43\1\35\1\44\2\43\1\4\1\0\1\45"+
    "\1\0\1\37\2\46\1\47\2\37\1\40\1\50\1\41"+
    "\2\37\1\51\2\0\1\4\1\37\1\6\1\50\1\40"+
    "\1\36\1\6\2\37\1\6\1\50\1\40\1\36\1\6"+
    "\1\37\1\6\1\50\1\40\1\36\1\6\1\52\1\34"+
    "\2\37\6\0\1\4\2\0\1\4\1\0\1\4\1\0"+
    "\1\37\1\0\1\37\2\53\4\37\1\0\1\4\1\37"+
    "\1\6\1\50\1\40\1\36\1\6\1\37\5\0\1\37"+
    "\3\0\1\34\1\54\3\4\3\37\1\34\1\37\3\0"+
    "\1\55\1\56\4\0\1\7\2\0\1\57\3\0\1\56"+
    "\1\0\1\60\3\0\1\61\2\0\1\56\5\0\1\61"+
    "\1\55\1\56\4\0\1\62\1\0\1\56\1\0\1\60"+
    "\1\0\3\62\1\56\4\0\2\62\10\0\1\62\3\0"+
    "\2\62\3\0\1\63\1\0\2\63\1\0\3\63\2\0"+
    "\2\63\1\64\2\63\3\0\1\64\2\63\2\0\1\64"+
    "\5\0\1\64\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\u0298\0\u0245\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u0437\0\u048a"+
    "\0\u04dd\0\u03e4\0\u0530\0\u0245\0\u0391\0\u0583\0\u05d6\0\u0629"+
    "\0\u0245\0\u0245\0\u067c\0\u06cf\0\u0722\0\u0775\0\u07c8\0\u0245"+
    "\0\u0245\0\u0245\0\u081b\0\u086e\0\u0530\0\u0245\0\u08c1\0\u0914"+
    "\0\u0967\0\u0245\0\u0530\0\u0245\0\u08c1\0\u0245\0\u0245\0\u0245"+
    "\0\u0245\0\u0245\0\u0245\0\u0245\0\u0245\0\u0245\0\u09ba\0\u0a0d"+
    "\0\u0245\0\u0a60\0\u0ab3\0\u0b06\0\u0b59\0\371\0\u014c\0\u0bac"+
    "\0\u01f2\0\u0245\0\u0bff\0\u0c52\0\u0ca5\0\u0cf8\0\u0d4b\0\u0d9e"+
    "\0\u0df1\0\u0df1\0\u0e44\0\u03e4\0\u0e97\0\u0eea\0\u0f3d\0\u0f90"+
    "\0\u0fe3\0\u1036\0\u1089\0\u10dc\0\u112f\0\u1182\0\u11d5\0\u1228"+
    "\0\u127b\0\u12ce\0\u1321\0\u05d6\0\u1374\0\u13c7\0\u141a\0\u146d"+
    "\0\u14c0\0\u1513\0\u1566\0\u15b9\0\u160c\0\u165f\0\u16b2\0\u1705"+
    "\0\u1758\0\u17ab\0\u17fe\0\u1851\0\u18a4\0\u18f7\0\u194a\0\u199d"+
    "\0\u19f0\0\u1a43\0\u1a96\0\u1ae9\0\u0245\0\u0bac\0\u1b3c\0\u1b8f"+
    "\0\u1be2\0\u1c35\0\u1c88\0\u1cdb\0\u1d2e\0\u1d81\0\u0245\0\u1dd4"+
    "\0\u0245\0\u0df1\0\u1d81\0\u1e27\0\u1e7a\0\u0245\0\u1ecd\0\u1ecd"+
    "\0\u1f20\0\u1f73\0\u0245\0\u1fc6\0\u2019\0\u206c\0\u20bf\0\u0245"+
    "\0\u2112\0\u2165\0\u0245\0\u21b8\0\u220b\0\u225e\0\u22b1\0\u2304"+
    "\0\u2357\0\u23aa\0\u23fd\0\u2450\0\u24a3\0\u24f6\0\u2549\0\u259c"+
    "\0\u25ef\0\u2642\0\u2695\0\u26e8\0\u273b\0\u278e\0\u27e1\0\u2834"+
    "\0\u2887\0\u0245\0\u28da\0\u292d\0\u2980\0\u29d3\0\u2a26\0\u2a79"+
    "\0\u2acc\0\u2acc\0\u1c35\0\u2b1f\0\u2b72\0\u2bc5\0\u2c18\0\u2c6b"+
    "\0\u2cbe\0\u2d11\0\u0eea\0\u2d64\0\u127b\0\u0245\0\u1f73\0\u2db7"+
    "\0\u2e0a\0\u2e5d\0\u1228\0\u2eb0\0\u2f03\0\u2f56\0\u2fa9\0\u2ffc"+
    "\0\u304f\0\u30a2\0\u30f5\0\u3148\0\u319b\0\u31ee\0\u3241\0\u3294"+
    "\0\u32e7\0\u333a\0\u338d\0\u33e0\0\u3433\0\u03e4\0\u2bc5\0\u3486"+
    "\0\u34d9\0\u352c\0\u357f\0\u0245\0\u35d2\0\u3625\0\u3678\0\u36cb"+
    "\0\u371e\0\u3771\0\u37c4\0\u3817\0\u386a\0\u38bd\0\u3910\0\u357f"+
    "\0\u35d2\0\u3963\0\u39b6\0\u3a09\0\u3a5c\0\u3aaf\0\u3b02\0\u3b55"+
    "\0\u3ba8\0\u3bfb\0\u3c4e\0\u3ca1\0\u3cf4\0\u3d47\0\u3d9a\0\u3ded"+
    "\0\u3e40\0\u3e93\0\u3ee6\0\u3f39\0\u3f8c\0\u3fdf\0\u4032\0\u0245"+
    "\0\u4085\0\u40d8\0\u412b\0\u417e\0\u41d1\0\u4224\0\u4277\0\u42ca"+
    "\0\u431d\0\u4370\0\u43c3\0\u4416\0\u4469\0\u44bc\0\u0245\0\u450f"+
    "\0\u4562\0\u45b5\0\u4608\0\u465b\0\u46ae\0\u4701\0\u4754\0\u47a7"+
    "\0\u47fa\0\u484d\0\u48a0\0\u48f3\0\u4946\0\u4999\0\u49ec\0\u4a3f"+
    "\0\u4a92\0\u4ae5\0\u4b38\0\u4b8b\0\u4bde\0\u4c31\0\u4c84\0\u4cd7"+
    "\0\u4d2a\0\u4d7d\0\u4dd0\0\u0245\0\u4e23\0\u4e76\0\u4ec9\0\u4f1c"+
    "\0\u4f6f\0\u4fc2\0\u5015\0\u5068\0\u50bb\0\u510e\0\u5161\0\u51b4"+
    "\0\u0245\0\u5207\0\u525a\0\u52ad\0\u5300\0\u5353\0\u53a6\0\u53f9"+
    "\0\u544c\0\u549f\0\u54f2\0\u5545\0\u5598\0\u55eb\0\u563e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\13"+
    "\1\17\2\20\1\21\1\22\1\23\1\21\1\24\1\25"+
    "\1\26\1\27\1\30\1\20\1\21\1\20\2\21\1\31"+
    "\1\32\1\33\1\34\1\20\1\21\1\35\2\21\1\20"+
    "\1\36\1\37\1\40\1\41\3\10\1\42\1\43\1\44"+
    "\1\10\1\45\1\46\2\47\2\50\1\51\3\30\1\20"+
    "\1\52\1\53\2\54\2\55\1\24\1\41\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\20\1\70\4\20\1\71\1\12\4\0\1\72\1\73"+
    "\1\74\5\0\1\74\3\0\1\73\2\0\1\72\36\0"+
    "\6\72\47\0\1\75\116\0\4\76\1\0\2\76\5\0"+
    "\5\76\2\0\12\76\6\0\2\76\1\0\1\76\11\0"+
    "\1\76\1\0\1\76\17\0\7\76\13\0\2\77\11\0"+
    "\1\77\1\0\1\77\4\0\1\77\1\0\1\77\1\0"+
    "\1\77\2\0\2\77\7\0\1\77\14\0\1\77\21\0"+
    "\7\77\5\0\1\100\3\0\1\100\123\0\4\101\1\0"+
    "\2\101\5\0\5\101\2\0\12\101\6\0\2\101\1\0"+
    "\1\101\11\0\1\101\1\0\1\101\17\0\7\101\127\0"+
    "\1\12\123\0\1\13\3\0\1\13\116\0\1\102\1\103"+
    "\1\0\1\104\1\105\1\106\1\107\1\110\1\111\1\104"+
    "\2\111\3\102\1\0\1\103\1\107\1\111\1\107\2\111"+
    "\1\102\1\0\1\107\1\111\1\107\1\111\1\107\2\111"+
    "\2\107\1\111\2\102\4\0\1\107\1\111\1\102\1\112"+
    "\1\102\1\0\1\102\6\103\1\107\1\0\1\111\1\0"+
    "\1\102\1\0\14\102\7\107\6\0\1\113\1\0\1\114"+
    "\5\0\1\114\6\0\1\113\36\0\6\113\37\0\1\115"+
    "\16\0\1\115\36\0\6\115\36\0\1\116\1\117\2\0"+
    "\1\116\1\120\2\121\1\120\1\122\1\123\1\120\4\0"+
    "\1\117\1\121\1\120\1\121\2\120\2\0\1\121\1\120"+
    "\1\121\1\120\1\121\2\120\2\121\1\120\6\0\1\121"+
    "\1\120\1\0\1\123\1\0\2\124\6\117\1\121\1\0"+
    "\1\123\2\0\2\124\13\0\7\121\6\0\1\125\3\0"+
    "\1\126\2\127\1\126\1\130\1\123\1\126\4\0\1\125"+
    "\1\127\1\126\1\127\2\126\2\0\1\127\1\126\1\127"+
    "\1\126\1\127\2\126\2\127\1\126\6\0\1\127\1\126"+
    "\1\0\1\123\1\0\2\124\6\125\1\127\1\0\1\123"+
    "\2\0\2\124\13\0\7\127\5\0\1\116\1\117\2\0"+
    "\1\116\1\120\2\121\1\120\1\131\1\123\1\120\4\0"+
    "\1\117\1\121\1\120\1\121\2\120\2\0\1\121\1\120"+
    "\1\121\1\120\1\121\2\120\2\121\1\120\6\0\1\121"+
    "\1\120\1\0\1\123\1\0\2\124\6\117\1\121\1\0"+
    "\1\123\2\0\2\124\13\0\7\121\6\0\1\117\3\0"+
    "\4\123\1\131\2\123\4\0\1\117\5\123\2\0\12\123"+
    "\6\0\2\123\1\0\1\123\1\0\2\124\6\117\1\123"+
    "\1\0\1\123\2\0\2\124\13\0\7\123\12\0\1\132"+
    "\1\0\1\132\3\0\1\132\3\0\1\133\6\132\2\0"+
    "\12\132\6\0\2\132\5\0\7\132\21\0\7\132\2\0"+
    "\1\134\3\0\3\134\1\0\22\134\1\0\70\134\3\0"+
    "\1\102\1\103\1\0\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\104\2\111\3\102\1\0\1\135\1\107\1\111"+
    "\1\107\2\111\1\102\1\0\1\107\1\111\1\107\1\111"+
    "\1\107\2\111\2\107\1\111\2\102\4\0\1\107\1\111"+
    "\1\102\1\112\1\102\1\0\1\102\6\135\1\107\1\0"+
    "\1\111\1\0\1\102\1\0\14\102\7\107\6\0\1\125"+
    "\3\0\1\126\2\127\1\126\1\130\1\123\1\126\4\0"+
    "\1\125\1\127\1\126\1\127\2\126\2\0\1\127\1\126"+
    "\1\136\1\137\1\127\2\126\2\127\1\126\6\0\1\127"+
    "\1\126\1\0\1\123\1\0\2\124\6\125\1\127\1\0"+
    "\1\123\2\0\2\124\13\0\7\127\5\0\1\116\1\117"+
    "\2\0\1\116\1\120\2\121\1\120\1\131\1\123\1\120"+
    "\4\0\1\117\1\121\1\120\1\121\2\120\2\0\1\121"+
    "\1\120\1\140\1\141\1\121\2\120\2\121\1\120\6\0"+
    "\1\121\1\120\1\0\1\123\1\0\2\124\6\117\1\121"+
    "\1\0\1\123\2\0\2\124\13\0\7\121\6\0\1\125"+
    "\3\0\1\126\2\127\1\126\1\130\1\123\1\126\4\0"+
    "\1\125\1\127\1\126\1\127\2\126\2\0\1\127\1\126"+
    "\1\127\1\126\1\127\2\126\2\127\1\126\6\0\1\127"+
    "\1\126\1\0\1\123\1\0\2\124\6\125\1\127\1\0"+
    "\1\123\2\0\2\124\13\0\5\127\1\142\1\127\6\0"+
    "\1\125\3\0\1\126\2\127\1\126\1\130\1\123\1\126"+
    "\4\0\1\125\1\127\1\126\1\127\2\126\2\0\1\127"+
    "\1\126\1\143\1\144\1\127\2\126\2\127\1\126\6\0"+
    "\1\127\1\126\1\0\1\123\1\0\2\124\6\125\1\127"+
    "\1\0\1\123\2\0\2\124\13\0\7\127\5\0\1\116"+
    "\1\117\2\0\1\116\1\120\2\121\1\120\1\131\1\123"+
    "\1\120\4\0\1\117\1\121\1\120\1\121\2\120\2\0"+
    "\1\121\1\120\1\145\1\146\1\121\2\120\2\121\1\120"+
    "\6\0\1\121\1\120\1\0\1\123\1\0\2\124\6\117"+
    "\1\121\1\0\1\123\2\0\2\124\13\0\7\121\6\0"+
    "\1\125\3\0\1\126\2\127\1\126\1\130\1\123\1\126"+
    "\4\0\1\125\1\127\1\126\1\127\2\126\2\0\1\127"+
    "\1\126\1\127\1\126\1\127\2\126\2\127\1\126\6\0"+
    "\1\147\1\150\1\0\1\123\1\0\2\124\6\125\1\127"+
    "\1\0\1\123\2\0\2\124\13\0\7\127\5\0\1\116"+
    "\1\117\2\0\1\116\1\120\2\121\1\120\1\131\1\123"+
    "\1\120\4\0\1\117\1\121\1\120\1\121\2\120\2\0"+
    "\1\121\1\120\1\121\1\120\1\121\2\120\2\121\1\120"+
    "\6\0\1\151\1\152\1\0\1\123\1\0\2\124\6\117"+
    "\1\121\1\0\1\123\2\0\2\124\13\0\7\121\12\0"+
    "\1\153\2\0\1\153\2\0\1\153\6\0\1\153\1\0"+
    "\2\153\3\0\1\153\1\0\1\153\1\0\2\153\2\0"+
    "\1\153\7\0\1\153\51\0\1\102\1\103\1\0\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\104\2\111\3\102"+
    "\1\0\1\154\1\107\1\111\1\107\2\111\1\102\1\0"+
    "\1\107\1\111\1\107\1\111\1\107\2\111\2\107\1\111"+
    "\2\102\4\0\1\107\1\111\1\102\1\112\1\102\1\0"+
    "\1\102\6\154\1\107\1\0\1\111\1\0\1\102\1\0"+
    "\14\102\7\107\5\0\1\102\1\103\1\0\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\104\2\111\3\102\1\0"+
    "\1\135\1\107\1\111\1\107\2\111\1\102\1\0\1\107"+
    "\1\111\1\107\1\111\1\107\2\111\2\107\1\111\2\102"+
    "\4\0\1\107\1\111\1\102\1\112\1\102\1\0\1\102"+
    "\4\154\2\135\1\107\1\0\1\111\1\0\1\102\1\0"+
    "\14\102\7\107\6\0\1\125\3\0\1\126\2\127\1\126"+
    "\1\130\1\123\1\126\4\0\1\125\1\127\1\126\1\127"+
    "\2\126\2\0\1\127\1\126\1\127\1\126\1\127\2\126"+
    "\1\127\1\155\1\126\6\0\1\127\1\126\1\0\1\123"+
    "\1\0\2\124\6\125\1\127\1\0\1\123\2\0\2\124"+
    "\13\0\7\127\6\0\1\125\3\0\1\126\2\127\1\126"+
    "\1\130\1\123\1\126\4\0\1\125\1\127\1\126\1\127"+
    "\2\126\2\0\1\127\1\126\1\127\1\126\1\127\2\126"+
    "\1\156\1\127\1\126\6\0\1\127\1\126\1\0\1\123"+
    "\1\0\2\124\6\125\1\127\1\0\1\123\2\0\2\124"+
    "\13\0\7\127\6\0\1\157\1\0\1\160\1\161\1\162"+
    "\1\0\1\162\1\0\1\160\6\0\1\157\36\0\6\157"+
    "\37\0\1\72\1\0\1\74\5\0\1\74\6\0\1\72"+
    "\36\0\6\72\37\0\1\163\16\0\1\163\36\0\6\163"+
    "\43\0\1\164\2\165\1\164\2\0\1\164\5\0\1\165"+
    "\1\164\1\165\2\164\2\0\1\165\1\164\1\165\1\164"+
    "\1\165\2\164\2\165\1\164\6\0\1\165\1\164\13\0"+
    "\1\165\21\0\7\165\6\0\1\166\16\0\1\166\36\0"+
    "\6\166\36\0\1\167\1\170\1\0\1\104\1\171\1\106"+
    "\1\107\1\110\1\111\1\104\2\111\2\172\1\102\1\0"+
    "\1\170\1\107\1\111\1\107\2\111\1\102\1\0\1\107"+
    "\1\111\1\107\1\111\1\107\2\111\2\107\1\111\2\102"+
    "\4\0\1\107\1\111\1\102\1\112\1\102\1\0\1\102"+
    "\6\170\1\107\1\0\1\111\1\0\1\102\1\0\14\102"+
    "\7\107\6\0\1\173\16\0\1\173\36\0\6\173\37\0"+
    "\1\174\16\0\1\174\36\0\6\174\37\0\1\175\1\176"+
    "\2\0\4\111\1\0\2\111\1\0\1\176\2\0\1\175"+
    "\5\111\2\0\12\111\6\0\2\111\1\0\1\111\3\0"+
    "\6\175\1\111\1\0\1\111\17\0\7\111\5\0\1\177"+
    "\2\0\2\177\1\200\2\111\1\200\1\201\1\111\1\200"+
    "\3\177\2\0\1\111\1\200\1\111\2\200\1\177\1\0"+
    "\1\111\1\200\1\111\1\200\1\111\2\200\2\111\1\200"+
    "\2\177\4\0\1\111\1\200\1\177\1\202\1\177\1\0"+
    "\1\177\6\0\1\111\1\0\1\111\1\0\1\177\1\0"+
    "\14\177\7\111\5\0\1\177\1\175\1\176\2\177\1\200"+
    "\2\111\1\200\1\201\1\111\1\200\1\177\1\203\1\177"+
    "\1\0\1\175\1\111\1\200\1\111\2\200\1\177\1\0"+
    "\1\111\1\200\1\111\1\200\1\111\2\200\2\111\1\200"+
    "\2\177\4\0\1\111\1\200\1\177\1\202\1\177\1\0"+
    "\1\177\6\175\1\111\1\0\1\111\1\0\1\177\1\0"+
    "\14\177\7\111\12\0\4\111\1\0\2\111\5\0\5\111"+
    "\2\0\12\111\6\0\2\111\1\0\1\111\11\0\1\111"+
    "\1\0\1\111\17\0\7\111\5\0\1\102\1\204\1\0"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\104\2\111"+
    "\3\102\1\0\1\204\1\107\1\111\1\107\2\111\1\102"+
    "\1\0\1\107\1\111\1\107\1\111\1\107\2\111\2\107"+
    "\1\111\2\102\4\0\1\107\1\111\1\102\1\112\1\102"+
    "\1\0\1\102\6\204\1\107\1\0\1\111\1\0\1\102"+
    "\1\0\14\102\7\107\5\0\1\102\1\115\1\0\2\102"+
    "\1\106\1\107\1\110\1\111\1\102\2\111\3\102\1\0"+
    "\1\115\1\107\1\111\1\107\2\111\1\102\1\0\1\107"+
    "\1\111\1\107\1\111\1\107\2\111\2\107\1\111\2\102"+
    "\4\0\1\107\1\111\1\102\1\112\1\102\1\0\1\102"+
    "\6\115\1\107\1\0\1\111\1\0\1\102\1\0\14\102"+
    "\7\107\12\0\1\205\2\0\1\205\2\0\1\205\6\0"+
    "\1\205\1\0\2\205\3\0\1\205\1\0\1\205\1\0"+
    "\2\205\2\0\1\205\7\0\1\205\51\0\1\206\1\117"+
    "\2\0\1\206\13\0\1\117\36\0\6\117\37\0\1\117"+
    "\3\0\1\120\2\121\1\120\1\0\1\123\1\120\4\0"+
    "\1\117\1\121\1\120\1\121\2\120\2\0\1\121\1\120"+
    "\1\121\1\120\1\121\2\120\2\121\1\120\6\0\1\121"+
    "\1\120\1\0\1\123\3\0\6\117\1\121\1\0\1\123"+
    "\17\0\7\121\6\0\1\117\3\0\4\121\1\0\2\121"+
    "\4\0\1\117\5\121\2\0\12\121\6\0\2\121\1\0"+
    "\1\121\3\0\6\117\1\121\1\0\1\121\17\0\7\121"+
    "\12\0\4\207\1\0\1\207\1\210\5\0\5\207\2\0"+
    "\12\207\6\0\2\207\1\0\1\207\11\0\1\207\1\0"+
    "\1\207\17\0\7\207\6\0\1\117\3\0\4\123\1\0"+
    "\2\123\4\0\1\117\5\123\2\0\12\123\6\0\2\123"+
    "\1\0\1\123\3\0\6\117\1\123\1\0\1\123\17\0"+
    "\7\123\12\0\1\211\2\212\1\211\1\0\1\212\1\211"+
    "\5\0\1\212\1\211\1\212\2\211\2\0\1\212\1\211"+
    "\1\212\1\211\1\212\2\211\2\212\1\211\6\0\1\212"+
    "\1\211\1\0\1\212\11\0\1\212\1\0\1\212\17\0"+
    "\7\212\5\0\1\213\1\214\2\0\1\213\1\0\2\215"+
    "\10\0\1\214\1\215\1\0\1\215\4\0\1\215\1\0"+
    "\1\215\1\0\1\215\2\0\2\215\7\0\1\215\6\0"+
    "\6\214\1\215\21\0\7\215\6\0\1\117\3\0\1\216"+
    "\2\217\1\216\1\220\1\123\1\216\4\0\1\117\1\217"+
    "\1\216\1\217\2\216\2\0\1\217\1\216\1\217\1\216"+
    "\1\217\2\216\2\217\1\216\6\0\1\217\1\216\1\0"+
    "\1\123\3\0\6\117\1\217\1\0\1\123\17\0\7\217"+
    "\6\0\1\214\3\0\1\123\2\221\1\123\1\0\2\123"+
    "\4\0\1\214\1\221\1\123\1\221\2\123\2\0\1\221"+
    "\1\123\1\221\1\123\1\221\2\123\2\221\1\123\6\0"+
    "\1\221\1\123\1\0\1\123\3\0\6\214\1\221\1\0"+
    "\1\123\17\0\7\221\12\0\1\207\2\222\1\207\1\0"+
    "\2\207\5\0\1\222\1\207\1\222\2\207\2\0\1\222"+
    "\1\207\1\222\1\207\1\222\2\207\2\222\1\207\6\0"+
    "\1\222\1\207\1\0\1\207\11\0\1\222\1\0\1\207"+
    "\17\0\7\222\12\0\4\207\1\0\2\207\5\0\5\207"+
    "\2\0\12\207\6\0\2\207\1\0\1\207\11\0\1\207"+
    "\1\0\1\207\17\0\7\207\12\0\1\132\1\0\1\132"+
    "\3\0\1\132\4\0\6\132\1\223\1\0\12\132\6\0"+
    "\2\132\5\0\7\132\21\0\7\132\25\0\1\224\2\225"+
    "\34\0\6\224\36\0\1\167\1\170\1\0\1\104\1\171"+
    "\1\106\1\107\1\110\1\111\1\104\2\111\2\172\1\102"+
    "\1\0\1\226\1\107\1\111\1\107\2\111\1\102\1\0"+
    "\1\107\1\111\1\107\1\111\1\107\2\111\2\107\1\111"+
    "\2\102\4\0\1\107\1\111\1\102\1\112\1\102\1\0"+
    "\1\102\6\226\1\107\1\0\1\111\1\0\1\102\1\0"+
    "\14\102\7\107\6\0\1\214\3\0\1\123\2\221\1\123"+
    "\1\0\2\123\4\0\1\214\1\221\1\123\1\221\2\123"+
    "\2\0\1\221\1\123\1\227\1\230\1\221\2\123\2\221"+
    "\1\123\6\0\1\221\1\123\1\0\1\123\3\0\6\214"+
    "\1\221\1\0\1\123\17\0\7\221\6\0\1\117\3\0"+
    "\1\216\2\217\1\216\1\220\1\123\1\216\4\0\1\117"+
    "\1\217\1\216\1\217\2\216\2\0\1\217\1\216\1\231"+
    "\1\232\1\217\2\216\2\217\1\216\6\0\1\217\1\216"+
    "\1\0\1\123\3\0\6\117\1\217\1\0\1\123\17\0"+
    "\7\217\6\0\1\117\3\0\4\121\1\0\2\121\4\0"+
    "\1\117\5\121\2\0\2\121\2\233\6\121\6\0\2\121"+
    "\1\0\1\121\3\0\6\117\1\121\1\0\1\121\17\0"+
    "\7\121\6\0\1\117\3\0\1\120\2\121\1\120\1\0"+
    "\1\123\1\120\4\0\1\117\1\121\1\120\1\121\2\120"+
    "\2\0\1\121\1\120\1\233\1\234\1\121\2\120\2\121"+
    "\1\120\6\0\1\121\1\120\1\0\1\123\3\0\6\117"+
    "\1\121\1\0\1\123\17\0\7\121\6\0\1\214\3\0"+
    "\1\123\2\221\1\123\1\0\2\123\4\0\1\214\1\221"+
    "\1\123\1\221\2\123\2\0\1\221\1\123\1\221\1\123"+
    "\1\221\2\123\2\221\1\123\6\0\1\221\1\123\1\0"+
    "\1\123\3\0\6\214\1\221\1\0\1\123\17\0\2\221"+
    "\1\235\4\221\6\0\1\214\3\0\1\123\2\221\1\123"+
    "\1\0\2\123\4\0\1\214\1\221\1\123\1\221\2\123"+
    "\2\0\1\221\1\123\1\221\1\123\1\236\1\237\1\123"+
    "\2\221\1\123\6\0\1\221\1\123\1\0\1\123\3\0"+
    "\6\214\1\221\1\0\1\123\17\0\7\221\6\0\1\117"+
    "\3\0\1\216\2\217\1\216\1\220\1\123\1\216\4\0"+
    "\1\117\1\217\1\216\1\217\2\216\2\0\1\217\1\216"+
    "\1\217\1\216\1\240\1\241\1\216\2\217\1\216\6\0"+
    "\1\217\1\216\1\0\1\123\3\0\6\117\1\217\1\0"+
    "\1\123\17\0\7\217\6\0\1\117\3\0\4\121\1\0"+
    "\2\121\4\0\1\117\5\121\2\0\4\121\2\242\4\121"+
    "\6\0\2\121\1\0\1\121\3\0\6\117\1\121\1\0"+
    "\1\121\17\0\7\121\6\0\1\117\3\0\1\120\2\121"+
    "\1\120\1\0\1\123\1\120\4\0\1\117\1\121\1\120"+
    "\1\121\2\120\2\0\1\121\1\120\1\121\1\120\1\242"+
    "\1\243\1\120\2\121\1\120\6\0\1\121\1\120\1\0"+
    "\1\123\3\0\6\117\1\121\1\0\1\123\17\0\7\121"+
    "\6\0\1\214\3\0\1\123\2\221\1\123\1\0\2\123"+
    "\4\0\1\214\1\221\1\123\1\221\2\123\2\0\1\221"+
    "\1\123\1\221\1\123\1\221\2\123\2\221\1\123\6\0"+
    "\1\244\1\245\1\0\1\123\3\0\6\214\1\221\1\0"+
    "\1\123\17\0\7\221\6\0\1\117\3\0\1\216\2\217"+
    "\1\216\1\220\1\123\1\216\4\0\1\117\1\217\1\216"+
    "\1\217\2\216\2\0\1\217\1\216\1\217\1\216\1\217"+
    "\2\216\2\217\1\216\6\0\1\246\1\247\1\0\1\123"+
    "\3\0\6\117\1\217\1\0\1\123\17\0\7\217\6\0"+
    "\1\117\3\0\4\121\1\0\2\121\4\0\1\117\5\121"+
    "\2\0\12\121\6\0\2\250\1\0\1\121\3\0\6\117"+
    "\1\121\1\0\1\121\17\0\7\121\6\0\1\117\3\0"+
    "\1\120\2\121\1\120\1\0\1\123\1\120\4\0\1\117"+
    "\1\121\1\120\1\121\2\120\2\0\1\121\1\120\1\121"+
    "\1\120\1\121\2\120\2\121\1\120\6\0\1\250\1\251"+
    "\1\0\1\123\3\0\6\117\1\121\1\0\1\123\17\0"+
    "\7\121\5\0\1\252\2\0\2\252\1\153\2\0\1\153"+
    "\1\252\1\0\1\153\3\252\3\0\1\153\1\0\2\153"+
    "\1\252\2\0\1\153\1\0\1\153\1\0\2\153\2\0"+
    "\1\153\2\252\5\0\1\153\3\252\1\0\1\252\12\0"+
    "\1\252\1\0\14\252\14\0\1\167\1\170\1\0\1\104"+
    "\1\171\1\106\1\107\1\110\1\111\1\104\2\111\2\172"+
    "\1\102\1\0\1\226\1\107\1\111\1\107\2\111\1\102"+
    "\1\0\1\107\1\111\1\107\1\111\1\107\2\111\2\107"+
    "\1\111\1\253\1\102\4\0\1\107\1\111\1\102\1\112"+
    "\1\102\1\0\1\102\6\226\1\107\1\0\1\111\1\0"+
    "\1\102\1\0\14\102\7\107\6\0\1\214\3\0\1\123"+
    "\2\221\1\123\1\0\2\123\4\0\1\214\1\221\1\123"+
    "\1\221\2\123\2\0\1\221\1\123\1\221\1\123\1\221"+
    "\2\123\2\221\1\123\6\0\1\221\1\123\1\0\1\123"+
    "\3\0\6\214\1\221\1\0\1\123\17\0\1\221\1\254"+
    "\5\221\6\0\1\214\3\0\1\123\2\221\1\123\1\0"+
    "\2\123\4\0\1\214\1\221\1\123\1\221\2\123\2\0"+
    "\1\221\1\123\1\221\1\123\1\221\2\123\2\221\1\123"+
    "\6\0\1\221\1\123\1\0\1\123\3\0\6\214\1\221"+
    "\1\0\1\123\17\0\3\221\1\255\3\221\6\0\1\256"+
    "\1\0\1\160\1\161\1\162\1\0\1\162\1\0\1\160"+
    "\6\0\1\256\36\0\6\256\37\0\1\257\16\0\1\257"+
    "\36\0\6\257\37\0\1\260\16\0\1\260\36\0\6\260"+
    "\37\0\1\261\1\262\12\0\1\262\2\0\1\261\36\0"+
    "\6\261\37\0\1\163\3\0\1\162\1\0\1\162\10\0"+
    "\1\163\36\0\6\163\44\0\2\165\11\0\1\165\1\0"+
    "\1\165\4\0\1\165\1\0\1\165\1\0\1\165\2\0"+
    "\2\165\7\0\1\165\14\0\1\165\21\0\7\165\21\0"+
    "\2\263\105\0\1\167\1\264\1\0\1\104\1\171\1\106"+
    "\1\107\1\110\1\111\1\104\2\111\2\172\1\102\1\0"+
    "\1\264\1\107\1\111\1\107\2\111\1\102\1\0\1\107"+
    "\1\111\1\107\1\111\1\107\2\111\2\107\1\111\2\102"+
    "\4\0\1\107\1\111\1\102\1\112\1\102\1\0\1\102"+
    "\6\264\1\107\1\0\1\111\1\0\1\102\1\0\14\102"+
    "\7\107\6\0\1\174\12\0\2\263\2\0\1\174\36\0"+
    "\6\174\36\0\1\265\1\266\2\0\1\265\13\0\1\266"+
    "\36\0\6\266\36\0\1\102\1\267\1\0\2\102\1\106"+
    "\1\107\1\110\1\111\1\102\2\111\3\102\1\0\1\267"+
    "\1\107\1\111\1\107\2\111\1\102\1\0\1\107\1\111"+
    "\1\107\1\111\1\107\2\111\2\107\1\111\2\102\4\0"+
    "\1\107\1\111\1\102\1\112\1\102\1\0\1\102\6\267"+
    "\1\107\1\0\1\111\1\0\1\102\1\0\14\102\7\107"+
    "\6\0\1\270\16\0\1\270\36\0\6\270\36\0\1\102"+
    "\1\175\1\0\2\102\1\111\2\107\1\111\1\102\2\111"+
    "\3\102\1\0\1\175\1\107\1\111\1\107\2\111\1\102"+
    "\1\0\1\107\1\111\1\107\1\111\1\107\2\111\2\107"+
    "\1\111\2\102\4\0\1\107\1\111\1\102\1\112\1\102"+
    "\1\0\1\102\6\175\1\107\1\0\1\111\1\0\1\102"+
    "\1\0\14\102\7\107\6\0\1\175\16\0\1\175\36\0"+
    "\6\175\43\0\4\111\1\201\2\111\5\0\5\111\2\0"+
    "\12\111\6\0\2\111\1\0\1\111\11\0\1\111\1\0"+
    "\1\111\17\0\7\111\5\0\1\102\1\271\1\0\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\104\2\111\3\102"+
    "\1\0\1\271\1\107\1\111\1\107\2\111\1\102\1\0"+
    "\1\107\1\111\1\107\1\111\1\107\2\111\2\107\1\111"+
    "\2\102\4\0\1\107\1\111\1\102\1\112\1\102\1\0"+
    "\1\102\6\271\1\107\1\0\1\111\1\0\1\102\1\0"+
    "\14\102\7\107\12\0\1\272\2\0\1\272\1\273\1\0"+
    "\1\272\6\0\1\272\1\0\2\272\3\0\1\272\1\0"+
    "\1\272\1\0\2\272\2\0\1\272\7\0\1\272\56\0"+
    "\4\274\1\275\2\274\5\0\5\274\2\0\12\274\6\0"+
    "\2\274\1\0\1\274\11\0\1\274\1\0\1\274\17\0"+
    "\7\274\5\0\1\276\2\0\2\276\4\212\1\276\2\212"+
    "\3\276\2\0\5\212\1\276\1\0\12\212\2\276\4\0"+
    "\2\212\1\276\1\277\1\276\1\0\1\276\6\0\1\212"+
    "\1\0\1\212\1\0\1\276\1\0\14\276\7\212\12\0"+
    "\4\212\1\0\2\212\5\0\5\212\2\0\12\212\6\0"+
    "\2\212\1\0\1\212\11\0\1\212\1\0\1\212\17\0"+
    "\7\212\5\0\1\213\1\300\2\0\1\213\1\0\2\301"+
    "\10\0\1\300\1\301\1\0\1\301\4\0\1\301\1\0"+
    "\1\301\1\0\1\301\2\0\2\301\7\0\1\301\6\0"+
    "\6\300\1\301\21\0\7\301\6\0\1\301\4\0\2\301"+
    "\10\0\2\301\1\0\1\301\4\0\1\301\1\0\1\301"+
    "\1\0\1\301\2\0\2\301\7\0\1\301\6\0\7\301"+
    "\21\0\7\301\6\0\1\117\3\0\1\216\2\217\1\216"+
    "\1\0\1\123\1\216\4\0\1\117\1\217\1\216\1\217"+
    "\2\216\2\0\1\217\1\216\1\217\1\216\1\217\2\216"+
    "\2\217\1\216\6\0\1\217\1\216\1\0\1\123\3\0"+
    "\6\117\1\217\1\0\1\123\17\0\7\217\6\0\1\117"+
    "\3\0\4\217\1\0\2\217\4\0\1\117\5\217\2\0"+
    "\12\217\6\0\2\217\1\0\1\217\3\0\6\117\1\217"+
    "\1\0\1\217\17\0\7\217\6\0\1\300\3\0\1\123"+
    "\2\302\1\123\1\0\2\123\4\0\1\300\1\302\1\123"+
    "\1\302\2\123\2\0\1\302\1\123\1\302\1\123\1\302"+
    "\2\123\2\302\1\123\6\0\1\302\1\123\1\0\1\123"+
    "\3\0\6\300\1\302\1\0\1\123\17\0\7\302\12\0"+
    "\4\274\1\303\2\274\5\0\5\274\2\0\12\274\6\0"+
    "\2\274\1\0\1\274\11\0\1\274\1\0\1\274\17\0"+
    "\7\274\25\0\1\224\5\0\1\223\30\0\6\224\43\0"+
    "\1\304\1\0\1\304\10\0\2\304\1\0\2\304\3\0"+
    "\1\304\1\0\1\304\1\0\1\304\2\0\3\304\6\0"+
    "\1\304\6\0\7\304\21\0\7\304\5\0\1\167\1\264"+
    "\1\0\1\104\1\171\1\106\1\107\1\110\1\111\1\104"+
    "\2\111\2\172\1\102\1\0\1\305\1\107\1\111\1\107"+
    "\2\111\1\102\1\0\1\107\1\111\1\107\1\111\1\107"+
    "\2\111\2\107\1\111\2\102\4\0\1\107\1\111\1\102"+
    "\1\112\1\102\1\0\1\102\6\305\1\107\1\0\1\111"+
    "\1\0\1\102\1\0\14\102\7\107\6\0\1\300\3\0"+
    "\1\123\2\302\1\123\1\0\2\123\4\0\1\300\1\302"+
    "\1\123\1\302\2\123\2\0\1\302\1\123\1\302\1\123"+
    "\1\306\1\307\1\123\2\302\1\123\6\0\1\302\1\123"+
    "\1\0\1\123\3\0\6\300\1\302\1\0\1\123\17\0"+
    "\7\302\6\0\1\117\3\0\4\123\1\0\2\123\4\0"+
    "\1\117\5\123\2\0\4\123\2\307\4\123\6\0\2\123"+
    "\1\0\1\123\3\0\6\117\1\123\1\0\1\123\17\0"+
    "\7\123\6\0\1\117\3\0\4\217\1\0\2\217\4\0"+
    "\1\117\5\217\2\0\4\217\2\310\4\217\6\0\2\217"+
    "\1\0\1\217\3\0\6\117\1\217\1\0\1\217\17\0"+
    "\7\217\6\0\1\117\3\0\1\216\2\217\1\216\1\0"+
    "\1\123\1\216\4\0\1\117\1\217\1\216\1\217\2\216"+
    "\2\0\1\217\1\216\1\217\1\216\1\310\1\311\1\216"+
    "\2\217\1\216\6\0\1\217\1\216\1\0\1\123\3\0"+
    "\6\117\1\217\1\0\1\123\17\0\7\217\6\0\1\117"+
    "\3\0\4\121\1\0\2\121\4\0\1\117\5\121\2\0"+
    "\4\121\2\312\4\121\6\0\2\121\1\0\1\121\3\0"+
    "\6\117\1\121\1\0\1\121\17\0\7\121\6\0\1\117"+
    "\3\0\1\120\2\121\1\120\1\0\1\123\1\120\4\0"+
    "\1\117\1\121\1\120\1\121\2\120\2\0\1\121\1\120"+
    "\1\121\1\120\1\312\1\313\1\120\2\121\1\120\6\0"+
    "\1\121\1\120\1\0\1\123\3\0\6\117\1\121\1\0"+
    "\1\123\17\0\7\121\6\0\1\300\3\0\1\123\2\302"+
    "\1\123\1\0\2\123\4\0\1\300\1\302\1\123\1\302"+
    "\2\123\2\0\1\302\1\123\1\302\1\123\1\302\2\123"+
    "\2\302\1\123\6\0\1\302\1\123\1\0\1\123\3\0"+
    "\6\300\1\302\1\0\1\123\17\0\6\302\1\314\6\0"+
    "\1\300\3\0\1\123\2\302\1\123\1\0\2\123\4\0"+
    "\1\300\1\302\1\123\1\302\2\123\2\0\1\302\1\123"+
    "\1\302\1\123\1\302\2\123\2\302\1\123\1\315\5\0"+
    "\1\302\1\123\1\0\1\123\3\0\6\300\1\302\1\0"+
    "\1\123\17\0\7\302\6\0\1\117\3\0\4\123\1\0"+
    "\2\123\4\0\1\117\5\123\2\0\12\123\1\315\5\0"+
    "\2\123\1\0\1\123\3\0\6\117\1\123\1\0\1\123"+
    "\17\0\7\123\6\0\1\117\3\0\4\217\1\0\2\217"+
    "\4\0\1\117\5\217\2\0\12\217\1\315\5\0\2\217"+
    "\1\0\1\217\3\0\6\117\1\217\1\0\1\217\17\0"+
    "\7\217\6\0\1\117\3\0\1\216\2\217\1\216\1\0"+
    "\1\123\1\216\4\0\1\117\1\217\1\216\1\217\2\216"+
    "\2\0\1\217\1\216\1\217\1\216\1\217\2\216\2\217"+
    "\1\216\1\315\5\0\1\217\1\216\1\0\1\123\3\0"+
    "\6\117\1\217\1\0\1\123\17\0\7\217\6\0\1\117"+
    "\3\0\4\121\1\0\2\121\4\0\1\117\5\121\2\0"+
    "\12\121\1\315\5\0\2\121\1\0\1\121\3\0\6\117"+
    "\1\121\1\0\1\121\17\0\7\121\6\0\1\117\3\0"+
    "\1\120\2\121\1\120\1\0\1\123\1\120\4\0\1\117"+
    "\1\121\1\120\1\121\2\120\2\0\1\121\1\120\1\121"+
    "\1\120\1\121\2\120\2\121\1\120\1\315\5\0\1\121"+
    "\1\120\1\0\1\123\3\0\6\117\1\121\1\0\1\123"+
    "\17\0\7\121\6\0\1\300\3\0\1\123\2\302\1\123"+
    "\1\316\2\123\4\0\1\300\1\302\1\123\1\302\2\123"+
    "\2\0\1\302\1\123\1\302\1\123\1\302\2\123\2\302"+
    "\1\123\6\0\1\302\1\123\1\0\1\123\3\0\6\300"+
    "\1\302\1\0\1\123\17\0\7\302\6\0\1\117\3\0"+
    "\4\123\1\316\2\123\4\0\1\117\5\123\2\0\12\123"+
    "\6\0\2\123\1\0\1\123\3\0\6\117\1\123\1\0"+
    "\1\123\17\0\7\123\6\0\1\117\3\0\4\217\1\316"+
    "\2\217\4\0\1\117\5\217\2\0\12\217\6\0\2\217"+
    "\1\0\1\217\3\0\6\117\1\217\1\0\1\217\17\0"+
    "\7\217\6\0\1\117\3\0\1\216\2\217\1\216\1\316"+
    "\1\123\1\216\4\0\1\117\1\217\1\216\1\217\2\216"+
    "\2\0\1\217\1\216\1\217\1\216\1\217\2\216\2\217"+
    "\1\216\6\0\1\217\1\216\1\0\1\123\3\0\6\117"+
    "\1\217\1\0\1\123\17\0\7\217\6\0\1\117\3\0"+
    "\4\121\1\316\2\121\4\0\1\117\5\121\2\0\12\121"+
    "\6\0\2\121\1\0\1\121\3\0\6\117\1\121\1\0"+
    "\1\121\17\0\7\121\6\0\1\117\3\0\1\120\2\121"+
    "\1\120\1\316\1\123\1\120\4\0\1\117\1\121\1\120"+
    "\1\121\2\120\2\0\1\121\1\120\1\121\1\120\1\121"+
    "\2\120\2\121\1\120\6\0\1\121\1\120\1\0\1\123"+
    "\3\0\6\117\1\121\1\0\1\123\17\0\7\121\64\0"+
    "\5\317\1\320\36\0\1\321\1\300\2\0\1\321\1\123"+
    "\2\302\1\123\1\0\2\123\4\0\1\300\1\302\1\123"+
    "\1\302\2\123\2\0\1\302\1\123\1\302\1\123\1\302"+
    "\2\123\2\302\1\123\6\0\1\302\1\123\1\0\1\123"+
    "\3\0\6\300\1\302\1\0\1\123\17\0\7\302\6\0"+
    "\1\300\3\0\1\123\2\302\1\123\1\0\2\123\4\0"+
    "\1\300\1\302\1\123\1\302\2\123\2\0\1\302\1\123"+
    "\1\302\1\123\1\302\2\123\2\302\1\123\6\0\1\302"+
    "\1\123\1\0\1\123\3\0\6\300\1\302\1\0\1\123"+
    "\17\0\4\302\1\322\2\302\6\0\1\323\1\0\1\160"+
    "\1\161\1\162\1\0\1\162\1\0\1\160\6\0\1\323"+
    "\36\0\6\323\37\0\1\324\3\0\1\162\1\0\1\162"+
    "\10\0\1\324\36\0\6\324\37\0\1\325\16\0\1\325"+
    "\36\0\6\325\37\0\1\261\16\0\1\261\36\0\6\261"+
    "\36\0\1\167\1\264\1\0\1\326\1\167\1\106\1\107"+
    "\1\110\1\111\1\326\2\111\2\172\1\102\1\0\1\264"+
    "\1\107\1\111\1\107\2\111\1\102\1\0\1\107\1\111"+
    "\1\107\1\111\1\107\2\111\2\107\1\111\2\102\4\0"+
    "\1\107\1\111\1\102\1\112\1\102\1\0\1\102\6\264"+
    "\1\107\1\0\1\111\1\0\1\102\1\0\14\102\7\107"+
    "\6\0\1\266\16\0\1\266\36\0\6\266\37\0\1\327"+
    "\16\0\1\327\36\0\6\327\36\0\1\102\1\330\1\0"+
    "\2\102\1\106\1\107\1\110\1\111\1\102\2\111\3\102"+
    "\1\0\1\330\1\107\1\111\1\107\2\111\1\102\1\0"+
    "\1\107\1\111\1\107\1\111\1\107\2\111\2\107\1\111"+
    "\2\102\4\0\1\107\1\111\1\102\1\112\1\102\1\0"+
    "\1\102\6\330\1\107\1\0\1\111\1\0\1\102\1\0"+
    "\14\102\7\107\6\0\1\331\16\0\1\331\36\0\6\331"+
    "\36\0\1\102\1\332\1\0\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\104\2\111\3\102\1\0\1\332\1\107"+
    "\1\111\1\107\2\111\1\102\1\0\1\107\1\111\1\107"+
    "\1\111\1\107\2\111\2\107\1\111\2\102\4\0\1\107"+
    "\1\111\1\102\1\112\1\102\1\0\1\102\6\332\1\107"+
    "\1\0\1\111\1\0\1\102\1\0\14\102\7\107\16\0"+
    "\1\273\122\0\1\275\111\0\1\213\1\333\2\0\1\213"+
    "\1\0\2\334\10\0\1\333\1\334\1\0\1\334\4\0"+
    "\1\334\1\0\1\334\1\0\1\334\2\0\2\334\7\0"+
    "\1\334\6\0\6\333\1\334\21\0\7\334\6\0\1\334"+
    "\4\0\2\334\10\0\2\334\1\0\1\334\4\0\1\334"+
    "\1\0\1\334\1\0\1\334\2\0\2\334\7\0\1\334"+
    "\6\0\7\334\21\0\7\334\6\0\1\333\3\0\1\123"+
    "\2\335\1\123\1\0\2\123\4\0\1\333\1\335\1\123"+
    "\1\335\2\123\2\0\1\335\1\123\1\335\1\123\1\335"+
    "\2\123\2\335\1\123\6\0\1\335\1\123\1\0\1\123"+
    "\3\0\6\333\1\335\1\0\1\123\17\0\7\335\12\0"+
    "\1\304\1\0\1\304\10\0\2\304\1\0\2\304\1\0"+
    "\1\223\1\0\1\304\1\0\1\304\1\0\1\304\2\0"+
    "\3\304\6\0\1\304\6\0\7\304\21\0\7\304\5\0"+
    "\1\167\1\264\1\0\1\326\1\167\1\106\1\107\1\110"+
    "\1\111\1\326\2\111\1\172\1\336\1\102\1\0\1\264"+
    "\1\107\1\111\1\107\2\111\1\102\1\0\1\107\1\111"+
    "\1\107\1\111\1\107\2\111\2\107\1\111\2\102\4\0"+
    "\1\107\1\111\1\102\1\112\1\102\1\0\1\102\6\264"+
    "\1\107\1\0\1\111\1\0\1\102\1\0\14\102\7\107"+
    "\6\0\1\333\3\0\1\123\2\335\1\123\1\0\2\123"+
    "\4\0\1\333\1\335\1\123\1\335\2\123\2\0\1\335"+
    "\1\123\1\335\1\123\1\335\1\123\1\237\1\337\1\335"+
    "\1\123\1\315\5\0\1\335\1\123\1\0\1\123\3\0"+
    "\6\333\1\335\1\0\1\123\17\0\7\335\6\0\1\117"+
    "\3\0\4\123\1\0\2\123\4\0\1\117\5\123\2\0"+
    "\6\123\2\237\2\123\1\315\5\0\2\123\1\0\1\123"+
    "\3\0\6\117\1\123\1\0\1\123\17\0\7\123\6\0"+
    "\1\117\3\0\4\217\1\0\2\217\4\0\1\117\5\217"+
    "\2\0\6\217\2\240\2\217\1\315\5\0\2\217\1\0"+
    "\1\217\3\0\6\117\1\217\1\0\1\217\17\0\7\217"+
    "\6\0\1\117\3\0\1\216\2\217\1\216\1\0\1\123"+
    "\1\216\4\0\1\117\1\217\1\216\1\217\2\216\2\0"+
    "\1\217\1\216\1\217\1\216\1\217\1\216\1\241\1\240"+
    "\1\217\1\216\1\315\5\0\1\217\1\216\1\0\1\123"+
    "\3\0\6\117\1\217\1\0\1\123\17\0\7\217\6\0"+
    "\1\117\3\0\4\121\1\0\2\121\4\0\1\117\5\121"+
    "\2\0\6\121\2\242\2\121\1\315\5\0\2\121\1\0"+
    "\1\121\3\0\6\117\1\121\1\0\1\121\17\0\7\121"+
    "\6\0\1\117\3\0\1\120\2\121\1\120\1\0\1\123"+
    "\1\120\4\0\1\117\1\121\1\120\1\121\2\120\2\0"+
    "\1\121\1\120\1\121\1\120\1\121\1\120\1\243\1\242"+
    "\1\121\1\120\1\315\5\0\1\121\1\120\1\0\1\123"+
    "\3\0\6\117\1\121\1\0\1\123\17\0\7\121\5\0"+
    "\1\340\1\333\2\0\1\340\1\123\2\335\1\123\1\0"+
    "\2\123\4\0\1\333\1\335\1\123\1\335\2\123\2\0"+
    "\1\335\1\123\1\335\1\123\1\335\2\123\2\335\1\123"+
    "\6\0\1\335\1\123\1\0\1\123\3\0\6\333\1\335"+
    "\1\0\1\123\17\0\7\335\50\0\1\341\60\0\1\342"+
    "\3\0\4\342\1\0\2\342\1\0\1\342\2\0\6\342"+
    "\2\0\12\342\3\0\1\342\2\0\2\342\1\0\1\342"+
    "\3\0\7\342\1\0\1\342\17\0\7\342\25\0\1\343"+
    "\36\0\6\343\115\0\1\343\43\0\1\321\3\0\1\321"+
    "\13\0\1\344\36\0\6\344\36\0\1\345\1\333\2\0"+
    "\1\345\1\123\2\335\1\123\1\0\2\123\4\0\1\333"+
    "\1\335\1\123\1\335\2\123\2\0\1\335\1\123\1\335"+
    "\1\123\1\335\2\123\2\335\1\123\6\0\1\335\1\123"+
    "\1\0\1\123\3\0\6\333\1\335\1\0\1\123\17\0"+
    "\7\335\6\0\1\323\1\0\1\74\1\0\1\162\1\0"+
    "\1\162\1\0\1\74\6\0\1\323\36\0\6\323\37\0"+
    "\1\346\3\0\1\162\1\0\1\162\10\0\1\346\36\0"+
    "\6\346\37\0\1\347\16\0\1\347\36\0\6\347\36\0"+
    "\1\102\1\115\1\0\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\104\2\111\3\102\1\0\1\115\1\107\1\111"+
    "\1\107\2\111\1\102\1\0\1\107\1\111\1\107\1\111"+
    "\1\107\2\111\2\107\1\111\2\102\4\0\1\107\1\111"+
    "\1\102\1\112\1\102\1\0\1\102\6\115\1\107\1\0"+
    "\1\111\1\0\1\102\1\0\14\102\7\107\5\0\1\102"+
    "\2\0\1\104\1\105\1\106\1\107\1\110\1\111\1\104"+
    "\2\111\3\102\2\0\1\107\1\111\1\107\2\111\1\102"+
    "\1\0\1\107\1\111\1\107\1\111\1\107\2\111\2\107"+
    "\1\111\2\102\4\0\1\107\1\111\1\102\1\112\1\102"+
    "\1\0\1\102\6\0\1\107\1\0\1\111\1\0\1\102"+
    "\1\0\14\102\7\107\5\0\1\102\1\332\1\0\1\326"+
    "\1\102\1\106\1\107\1\110\1\111\1\326\2\111\3\102"+
    "\1\0\1\332\1\107\1\111\1\107\2\111\1\102\1\0"+
    "\1\107\1\111\1\107\1\111\1\107\2\111\2\107\1\111"+
    "\2\102\4\0\1\107\1\111\1\102\1\112\1\102\1\0"+
    "\1\102\6\332\1\107\1\0\1\111\1\0\1\102\1\0"+
    "\14\102\7\107\5\0\1\213\1\350\2\0\1\213\13\0"+
    "\1\350\36\0\6\350\37\0\1\350\3\0\1\123\2\351"+
    "\1\123\1\0\2\123\4\0\1\350\1\351\1\123\1\351"+
    "\2\123\2\0\1\351\1\123\1\351\1\123\1\351\2\123"+
    "\2\351\1\123\6\0\1\351\1\123\1\0\1\123\3\0"+
    "\6\350\1\351\1\0\1\123\17\0\7\351\5\0\1\265"+
    "\1\266\2\0\1\265\13\0\1\266\36\0\1\352\1\353"+
    "\4\266\37\0\1\350\3\0\1\123\2\351\1\123\1\0"+
    "\2\123\4\0\1\350\1\351\1\123\1\351\2\123\2\0"+
    "\1\351\1\123\1\351\1\123\1\351\2\123\2\351\1\123"+
    "\1\315\5\0\1\351\1\123\1\0\1\123\3\0\6\350"+
    "\1\351\1\0\1\123\17\0\7\351\5\0\1\340\1\354"+
    "\2\0\1\340\13\0\1\354\36\0\6\354\101\0\1\355"+
    "\60\0\1\342\3\0\4\342\1\356\2\342\1\0\1\342"+
    "\2\0\6\342\2\0\12\342\3\0\1\342\2\0\2\342"+
    "\1\0\1\342\3\0\7\342\1\0\1\342\17\0\7\342"+
    "\47\0\1\357\100\0\1\360\36\0\6\360\36\0\1\345"+
    "\3\0\1\345\10\0\1\361\2\0\1\361\36\0\6\361"+
    "\37\0\1\163\1\0\1\160\1\161\1\162\1\0\1\162"+
    "\1\0\1\160\6\0\1\163\36\0\6\163\41\0\1\160"+
    "\1\161\1\162\1\0\1\162\1\0\1\160\112\0\1\327"+
    "\16\0\1\362\36\0\6\362\37\0\1\327\16\0\1\327"+
    "\36\0\3\362\3\327\37\0\1\354\16\0\1\354\36\0"+
    "\6\354\33\0\1\363\3\0\1\364\2\363\1\0\4\364"+
    "\1\363\2\364\1\363\1\364\2\363\6\364\2\363\12\364"+
    "\1\0\1\363\1\0\1\364\1\365\1\363\2\364\1\363"+
    "\1\364\3\363\7\364\1\363\1\364\17\363\7\364\2\363"+
    "\4\0\1\366\3\0\4\366\1\0\2\366\1\0\1\366"+
    "\2\0\6\366\2\0\12\366\3\0\1\366\2\0\2\366"+
    "\1\0\1\366\3\0\7\366\1\0\1\366\17\0\7\366"+
    "\64\0\5\367\1\370\56\0\1\371\36\0\6\371\53\0"+
    "\1\372\2\0\1\372\36\0\6\372\37\0\1\327\13\0"+
    "\1\373\2\0\1\327\36\0\6\327\33\0\1\363\3\0"+
    "\3\363\1\0\35\363\1\374\1\363\1\0\54\363\3\0"+
    "\1\364\2\363\1\0\4\364\1\375\2\364\1\363\1\364"+
    "\2\363\6\364\2\363\12\364\1\374\1\363\1\0\1\364"+
    "\2\363\2\364\1\363\1\364\3\363\7\364\1\363\1\364"+
    "\17\363\7\364\3\363\3\0\3\363\1\0\1\376\1\363"+
    "\1\376\3\363\1\376\4\363\6\376\2\363\12\376\1\374"+
    "\1\363\1\0\3\363\2\376\5\363\7\376\21\363\7\376"+
    "\2\363\4\0\1\366\3\0\4\366\1\356\2\366\1\0"+
    "\1\366\2\0\6\366\2\0\12\366\1\0\1\377\1\0"+
    "\1\366\2\0\2\366\1\0\1\366\3\0\7\366\1\0"+
    "\1\366\17\0\7\366\25\0\1\u0100\36\0\6\u0100\115\0"+
    "\1\u0100\63\0\1\u0101\36\0\6\u0101\53\0\1\u0102\2\0"+
    "\1\u0102\36\0\6\u0102\115\0\3\u0103\1\u0104\35\0\1\u0105"+
    "\3\0\3\u0105\1\0\37\u0105\1\0\53\u0105\1\363\3\0"+
    "\1\u0106\2\363\1\0\4\u0106\1\363\2\u0106\1\363\1\u0106"+
    "\2\363\6\u0106\2\363\12\u0106\1\374\1\363\1\0\1\u0106"+
    "\2\363\2\u0106\1\363\1\u0106\3\363\7\u0106\1\363\1\u0106"+
    "\17\363\7\u0106\3\363\3\0\3\363\1\0\1\376\1\363"+
    "\1\376\3\363\1\376\4\363\6\376\2\363\12\376\1\u0107"+
    "\1\363\1\0\3\363\2\376\5\363\7\376\21\363\7\376"+
    "\2\363\1\377\3\0\3\377\1\0\42\377\1\0\4\377"+
    "\1\0\25\377\1\0\1\377\1\0\13\377\23\0\1\u0108"+
    "\36\0\6\u0108\53\0\1\u0109\2\0\1\u0109\36\0\6\u0109"+
    "\56\0\1\u010a\36\0\6\u010a\115\0\3\u010a\36\0\1\u0105"+
    "\3\0\3\u0105\1\0\37\u0105\1\u010b\53\u0105\1\363\3\0"+
    "\1\u0106\2\363\1\0\4\u0106\1\375\2\u0106\1\363\1\u0106"+
    "\2\363\6\u0106\2\363\12\u0106\1\374\1\u010c\1\0\1\u0106"+
    "\2\363\2\u0106\1\363\1\u0106\3\363\7\u0106\1\363\1\u0106"+
    "\17\363\7\u0106\2\363\1\u0105\3\0\3\u0105\1\0\1\u010d"+
    "\1\u0105\1\u010d\3\u0105\1\u010d\4\u0105\6\u010d\2\u0105\12\u010d"+
    "\1\u010e\1\u0105\1\0\3\u0105\2\u010d\5\u0105\7\u010d\21\u0105"+
    "\7\u010d\2\u0105\23\0\1\u010f\36\0\6\u010f\53\0\1\u0110"+
    "\2\0\1\u0110\36\0\6\u0110\70\0\1\u0111\71\0\1\u0112"+
    "\3\0\4\u0112\1\0\2\u0112\1\0\1\u0112\2\0\6\u0112"+
    "\2\0\12\u0112\3\0\1\u0112\1\u0113\1\0\2\u0112\1\0"+
    "\1\u0112\3\0\7\u0112\1\0\1\u0112\17\0\7\u0112\2\0"+
    "\1\u010c\3\0\3\u010c\1\0\35\u010c\1\u0114\1\u010c\1\u0115"+
    "\2\u010c\1\363\4\u010c\1\363\25\u010c\1\363\1\u010c\1\363"+
    "\13\u010c\1\u0105\3\0\3\u0105\1\0\1\u010d\1\u0105\1\u010d"+
    "\3\u0105\1\u010d\4\u0105\6\u010d\2\u0105\12\u010d\1\u0116\1\u0114"+
    "\1\u010b\3\u0105\2\u010d\5\u0105\7\u010d\21\u0105\7\u010d\3\u0105"+
    "\3\0\3\u0105\1\0\35\u0105\1\u0116\1\u0114\1\u010b\53\u0105"+
    "\20\0\1\u0117\2\0\1\u0117\36\0\6\u0117\115\0\2\u0118"+
    "\1\u0119\42\0\1\u0112\3\0\4\u0112\1\u011a\2\u0112\1\0"+
    "\1\u0112\2\0\6\u0112\2\0\12\u0112\3\0\1\u0112\2\0"+
    "\2\u0112\1\0\1\u0112\3\0\7\u0112\1\0\1\u0112\17\0"+
    "\7\u0112\12\0\1\u011b\1\0\1\u011b\3\0\1\u011b\4\0"+
    "\6\u011b\2\0\12\u011b\6\0\2\u011b\5\0\7\u011b\21\0"+
    "\7\u011b\2\0\1\u0114\3\0\3\u0114\1\0\37\u0114\1\u0115"+
    "\2\u0114\1\u0105\4\u0114\1\u0105\25\u0114\1\u0105\1\u0114\1\u0105"+
    "\13\u0114\1\u0115\3\0\3\u0115\1\0\42\u0115\1\0\4\u0115"+
    "\1\0\25\u0115\1\0\1\u0115\1\0\13\u0115\1\u0105\3\0"+
    "\3\u0105\1\0\1\u010d\1\u0105\1\u010d\3\u0105\1\u010d\4\u0105"+
    "\6\u010d\2\u0105\12\u010d\1\u010e\1\u0105\1\u010b\3\u0105\2\u010d"+
    "\5\u0105\7\u010d\21\u0105\7\u010d\2\u0105\20\0\1\u011c\2\0"+
    "\1\u011c\36\0\6\u011c\56\0\1\u011d\36\0\6\u011d\115\0"+
    "\4\u011d\41\0\1\u011e\3\0\4\u011e\1\0\2\u011e\1\0"+
    "\1\u011e\2\0\6\u011e\2\0\12\u011e\3\0\1\u011e\2\0"+
    "\2\u011e\1\0\1\u011e\3\0\7\u011e\1\0\1\u011e\17\0"+
    "\7\u011e\12\0\1\u011b\1\0\1\u011b\3\0\1\u011b\4\0"+
    "\6\u011b\2\0\12\u011b\1\u011f\5\0\2\u011b\5\0\7\u011b"+
    "\21\0\7\u011b\22\0\1\u0120\2\0\1\u0120\36\0\6\u0120"+
    "\100\0\1\u0121\61\0\1\u011e\3\0\4\u011e\1\u011a\2\u011e"+
    "\1\0\1\u011e\2\0\6\u011e\2\0\12\u011e\1\0\1\u0115"+
    "\1\0\1\u011e\2\0\2\u011e\1\0\1\u011e\3\0\7\u011e"+
    "\1\0\1\u011e\17\0\7\u011e\12\0\1\u0122\1\0\1\u0122"+
    "\3\0\1\u0122\4\0\6\u0122\2\0\12\u0122\1\u0123\5\0"+
    "\2\u0122\5\0\7\u0122\21\0\7\u0122\22\0\1\u0124\2\0"+
    "\1\u0124\36\0\6\u0124\115\0\5\u0125\1\u0126\43\0\1\u0122"+
    "\1\0\1\u0122\3\0\1\u0122\4\0\6\u0122\2\0\12\u0122"+
    "\1\u011f\1\u0115\4\0\2\u0122\5\0\7\u0122\21\0\7\u0122"+
    "\47\0\1\u011f\1\u0115\74\0\1\u0127\2\0\1\u0127\36\0"+
    "\6\u0127\56\0\1\u0128\36\0\6\u0128\115\0\1\u0128\60\0"+
    "\1\u0129\2\0\1\u012a\36\0\6\u012a\100\0\1\u012b\64\0"+
    "\1\u012c\10\0\1\u012d\2\0\1\u012e\2\u012c\34\0\6\u012e"+
    "\53\0\1\u012d\2\0\1\u012e\36\0\6\u012e\115\0\5\u012f"+
    "\1\u0130\42\0\1\u012c\10\0\1\u0131\2\0\1\u0132\2\u012c"+
    "\34\0\6\u0132\53\0\1\u0131\2\0\1\u0132\36\0\6\u0132"+
    "\56\0\1\u0133\36\0\6\u0133\115\0\1\u0133\47\0\1\u012c"+
    "\10\0\1\u0134\2\0\1\u0135\2\u012c\34\0\6\u0135\53\0"+
    "\1\u0134\2\0\1\u0135\36\0\6\u0135\36\0\1\u0136\1\0"+
    "\1\u0137\1\0\1\u0136\4\0\1\u0138\3\0\1\u0137\47\0"+
    "\1\u0139\41\0\1\u012c\10\0\1\u013a\2\0\1\u013b\2\u012c"+
    "\34\0\6\u013b\53\0\1\u013a\2\0\1\u013b\36\0\6\u013b"+
    "\36\0\1\u0136\1\0\1\u0137\1\0\1\u0136\10\0\1\u0137"+
    "\164\0\2\u013c\1\u013d\61\0\1\u013e\36\0\6\u013e\42\0"+
    "\1\u012c\10\0\1\u013f\2\0\3\u012c\34\0\6\u012c\53\0"+
    "\1\u013f\125\0\1\u0140\36\0\6\u0140\115\0\4\u0140\40\0"+
    "\1\u0136\1\0\1\u0137\1\0\1\u0136\10\0\1\u0137\2\0"+
    "\1\u013e\36\0\6\u013e\1\u0139\41\0\1\u012c\13\0\3\u012c"+
    "\34\0\6\u012c\100\0\1\u0141\137\0\5\u0142\1\u0143\56\0"+
    "\1\u0144\36\0\6\u0144\115\0\1\u0144\105\0\1\u0145\137\0"+
    "\5\u0146\1\u0147\56\0\1\u0139\36\0\6\u0139\115\0\1\u0139"+
    "\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22161];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\1\11\11\1\1\11\4\1\2\11"+
    "\5\1\3\11\3\1\1\11\3\1\1\11\1\1\1\11"+
    "\1\1\11\11\2\1\1\11\1\1\3\0\2\1\1\0"+
    "\1\1\1\11\11\1\1\0\1\1\2\0\2\1\1\0"+
    "\1\1\1\0\4\1\3\0\17\1\1\0\4\1\3\0"+
    "\1\1\1\0\1\11\6\1\1\0\1\1\1\0\1\11"+
    "\1\1\1\11\3\1\1\0\1\11\1\0\3\1\1\11"+
    "\4\1\1\11\2\1\1\11\2\0\24\1\1\11\5\1"+
    "\1\0\1\1\2\0\1\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\5\1\1\0\10\1"+
    "\5\0\3\1\1\0\6\1\1\11\3\1\3\0\2\1"+
    "\1\0\2\1\1\0\1\1\2\0\1\1\3\0\1\1"+
    "\1\0\1\1\3\0\1\1\2\0\1\1\5\0\1\1"+
    "\1\11\1\1\4\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\11\4\0\2\1\10\0\1\1\3\0"+
    "\2\1\3\0\1\1\1\0\2\1\1\0\1\11\2\1"+
    "\2\0\5\1\3\0\1\11\2\1\2\0\1\1\5\0"+
    "\1\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
    StringBuilder data = new StringBuilder();
        private int startchar;

        private void begin_symbol() {
            this.data.setLength(0);
            startchar = yychar;
            data.append(yytext());
        }

        private void end_symbol() {
            data.append(yytext());
        }

        private Yytoken symbol(Sym sym) {
          return new Yytoken(sym, yychar, yytext());
        }

        private Yytoken symbol_pushback(Sym sym, int cnt) {
            String text = yytext();
            text = text.substring(0,text.length()-cnt);

            Yytoken tok = new Yytoken(sym, yychar, text);
            yypushback(cnt);
            return tok;
        }

        private Yytoken symbol(Sym sym, int start, String text) {
              return new Yytoken(sym, start, text);
        }

        private Yytoken symbol_data(Sym sym) {
          return new Yytoken(sym, startchar, data.toString());
        }

        private Yytoken consume_next_pushback(Sym sym, int cnt) throws java.io.IOException  {
            String text = yytext();
            int start = yychar;
            Yytoken nxt = yylex();
            yypushback(1);

            return symbol(sym, start, text + nxt.data.substring(0,nxt.data.length()-cnt));
        }

        private Yytoken consume_next(Sym sym) throws java.io.IOException  {
            String text = yytext();
            int start = yychar;
            Yytoken nxt = yylex();

            return symbol(sym, start, text + nxt.data);
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Tokenizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 5152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(Sym.RAW);
            }
          case 53: break;
          case 2: 
            { return symbol(Sym.NEWLINE);
            }
          case 54: break;
          case 3: 
            { return symbol(Sym.WHITESPACE);
            }
          case 55: break;
          case 4: 
            { return symbol(Sym.NUMBER);
            }
          case 56: break;
          case 5: 
            { return symbol(Sym.COMMA);
            }
          case 57: break;
          case 6: 
            { return symbol(Sym.WORD);
            }
          case 58: break;
          case 7: 
            { return symbol(Sym.WORD_UPPER_CASE);
            }
          case 59: break;
          case 8: 
            { return symbol(Sym.PERIOD);
            }
          case 60: break;
          case 9: 
            { return symbol(Sym.HYPHEN);
            }
          case 61: break;
          case 10: 
            { return symbol(Sym.AMPERSAND);
            }
          case 62: break;
          case 11: 
            { return symbol(Sym.SEMICOLON);
            }
          case 63: break;
          case 12: 
            { return symbol(Sym.CONTROL_CODES);
            }
          case 64: break;
          case 13: 
            { return symbol(Sym.COLON);
            }
          case 65: break;
          case 14: 
            { return symbol(Sym.SLASH);
            }
          case 66: break;
          case 15: 
            { return symbol(Sym.PIPE);
            }
          case 67: break;
          case 16: 
            { return symbol(Sym.BANG);
            }
          case 68: break;
          case 17: 
            { return symbol(Sym.APOSTROPHE);
            }
          case 69: break;
          case 18: 
            { return symbol(Sym.CITATION);
            }
          case 70: break;
          case 19: 
            { return symbol(Sym.PERCENT);
            }
          case 71: break;
          case 20: 
            { return symbol(Sym.CURRENCY);
            }
          case 72: break;
          case 21: 
            { return symbol(Sym.PAREN_LEFT);
            }
          case 73: break;
          case 22: 
            { return symbol(Sym.PAREN_RIGHT);
            }
          case 74: break;
          case 23: 
            { return symbol(Sym.CURLY_LEFT);
            }
          case 75: break;
          case 24: 
            { return symbol(Sym.CURLY_RIGHT);
            }
          case 76: break;
          case 25: 
            { return symbol(Sym.BRACKET_LEFT);
            }
          case 77: break;
          case 26: 
            { return symbol(Sym.BRACKET_RIGHT);
            }
          case 78: break;
          case 27: 
            { return symbol(Sym.QUESTION);
            }
          case 79: break;
          case 28: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return symbol(Sym.NUMBER);
            }
          case 80: break;
          case 29: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 1;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 3;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { return symbol(Sym.NUMBER);
            }
          case 81: break;
          case 30: 
            { return symbol(Sym.WORD_MIXED_CASE_LOWER);
            }
          case 82: break;
          case 31: 
            { return symbol(Sym.WORD_ACRONYM);
            }
          case 83: break;
          case 32: 
            { return symbol(Sym.WORD_TITLE_CASE);
            }
          case 84: break;
          case 33: 
            { return symbol(Sym.WORD_INITIAL);
            }
          case 85: break;
          case 34: 
            { return symbol(Sym.HASHTAG);
            }
          case 86: break;
          case 35: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return consume_next(Sym.WORD);
            }
          case 87: break;
          case 36: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 1;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 2;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { return consume_next(Sym.WORD);
            }
          case 88: break;
          case 37: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 6;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 5;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { return consume_next(Sym.WORD);
            }
          case 89: break;
          case 38: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return symbol(Sym.ELISION_PREFIX);
            }
          case 90: break;
          case 39: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 4;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 5;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { return consume_next(Sym.WORD);
            }
          case 91: break;
          case 40: 
            { return symbol(Sym.WORD_MIXED_CASE_UPPER);
            }
          case 92: break;
          case 41: 
            { return symbol(Sym.HTML_ENTITY);
            }
          case 93: break;
          case 42: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return symbol(Sym.ELISION_SUFFIX);
            }
          case 94: break;
          case 43: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return symbol_pushback(Sym.WORD_UPPER_CASE, 2);
            }
          case 95: break;
          case 44: 
            { return symbol(Sym.RANGE);
            }
          case 96: break;
          case 45: 
            { return symbol(Sym.TIME);
            }
          case 97: break;
          case 46: 
            { return symbol(Sym.RFC);
            }
          case 98: break;
          case 47: 
            { return symbol(Sym.PMID);
            }
          case 99: break;
          case 48: 
            { return symbol(Sym.DATE);
            }
          case 100: break;
          case 49: 
            { return symbol(Sym.URL);
            }
          case 101: break;
          case 50: 
            { if(yycharat(yylength()-1) == '.') {
                yypushback(1);
            }
            return symbol(Sym.URL);
            }
          case 102: break;
          case 51: 
            { return symbol(Sym.ISBN);
            }
          case 103: break;
          case 52: 
            { return symbol(Sym.DATETIME);
            }
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
